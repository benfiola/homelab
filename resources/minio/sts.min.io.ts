// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema PolicyBinding
 */
export class PolicyBinding extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PolicyBinding"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'sts.min.io/v1alpha1',
    kind: 'PolicyBinding',
  }

  /**
   * Renders a Kubernetes manifest for "PolicyBinding".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PolicyBindingProps = {}): any {
    return {
      ...PolicyBinding.GVK,
      ...toJson_PolicyBindingProps(props),
    };
  }

  /**
   * Defines a "PolicyBinding" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PolicyBindingProps = {}) {
    super(scope, id, {
      ...PolicyBinding.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PolicyBinding.GVK,
      ...toJson_PolicyBindingProps(resolved),
    };
  }
}

/**
 * @schema PolicyBinding
 */
export interface PolicyBindingProps {
  /**
   * @schema PolicyBinding#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema PolicyBinding#spec
   */
  readonly spec?: PolicyBindingSpec;

}

/**
 * Converts an object of type 'PolicyBindingProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyBindingProps(obj: PolicyBindingProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PolicyBindingSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PolicyBindingSpec
 */
export interface PolicyBindingSpec {
  /**
   * @schema PolicyBindingSpec#application
   */
  readonly application: PolicyBindingSpecApplication;

  /**
   * @schema PolicyBindingSpec#policies
   */
  readonly policies: string[];

}

/**
 * Converts an object of type 'PolicyBindingSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyBindingSpec(obj: PolicyBindingSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'application': toJson_PolicyBindingSpecApplication(obj.application),
    'policies': obj.policies?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PolicyBindingSpecApplication
 */
export interface PolicyBindingSpecApplication {
  /**
   * @schema PolicyBindingSpecApplication#namespace
   */
  readonly namespace: string;

  /**
   * @schema PolicyBindingSpecApplication#serviceaccount
   */
  readonly serviceaccount: string;

}

/**
 * Converts an object of type 'PolicyBindingSpecApplication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyBindingSpecApplication(obj: PolicyBindingSpecApplication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'namespace': obj.namespace,
    'serviceaccount': obj.serviceaccount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

